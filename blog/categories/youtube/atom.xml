<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Youtube | Chicken's Blog ^_^]]></title>
  <link href="http://codeforfoods.net/blog/categories/youtube/atom.xml" rel="self"/>
  <link href="http://codeforfoods.net/"/>
  <updated>2014-11-27T17:02:40+07:00</updated>
  <id>http://codeforfoods.net/</id>
  <author>
    <name><![CDATA[codeforfoods]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Rails] Get Youtube Download Link]]></title>
    <link href="http://codeforfoods.net/blog/2014/11/19/rails-get-youtube-download-link/"/>
    <updated>2014-11-19T08:39:56+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/11/19/rails-get-youtube-download-link</id>
    <content type="html"><![CDATA[<h3>Installation:</h3>

<pre><code>    gem install viddl-rb
</code></pre>

<h3>Usage:</h3>

<p>Download a video: viddl-rb <a href="http://www.youtube.com/watch?v=QH2-TGUlwu4">http://www.youtube.com/watch?v=QH2-TGUlwu4</a>
<br>
Viddl-rb supports the following command line options:
<code>
-e, --extract-audio              Extract the audio track of the download to a separate file
-a, --abort-on-failure           Abort if one of the videos in a list fails to download
-u, --url-only                   Just display the download url without downloading the file.
-t, --title-only                 Just display the title without downloading the file.
-f, --filter REGEX               Filters a video playlist according to the regex (Youtube only right now)
-s, --save-dir DIRECTORY         Specifies the directory where videos should be saved
-d, --downloader TOOL            Specifies the tool to download with. Supports 'wget', 'curl', 'aria2c' and 'net-http'
-q, --quality QUALITY            Specifies the video format and resolution in the following way: width:height:format (e.g. 1280:720:mp4)
                                 The width, height and format may be omitted with a *.
                                 For example, to match any quality with a height of 720 pixels in any format specify --quality *:720:*
-h, --help                       Displays the help screen
</code></p>

<h3>Library Usage:</h3>

<pre><code>require 'viddl-rb'

download_urls = ViddlRb.get_urls("http://www.youtube.com/watch?v=QH2-TGUlwu4")
download_urls.first     # =&gt; "http://o-o.preferred.arn06s04.v3.lscac ..."
</code></pre>

<p>The ViddlRb module has the following module public methods:</p>

<h4>get_urls_names(url)</h4>

<p> &ndash; Returns an array of one or more hashes that has the keys :url which points to the download url and :name which points to the name (which is a filename safe version of the video title with a file extension). Returns nil if the url is not recognized by any plugins.</p>

<h4>get_urls_exts(url)</h4>

<p>&ndash; Same as get_urls_names but with just the file extension (for example &ldquo;.mp4&rdquo;) instead of the full filename, and the :name key is replaced with :ext. Returns nil if the url is not recognized by any plugins.</p>

<h4>get_urls(url)</h4>

<p>&ndash; Returns an array of download urls for the specified video url. Returns nil if the url is not recognized by any plugins.</p>

<h4>get_names(url)</h4>

<p>&ndash; Returns an array of filenames for the specified video url. Returns nil if the url is not recognized by any plugins.</p>

<h4>io=(io_object)</h4>

<p>&ndash; By default all plugin output to stdout will be suppressed when the library is used. If you are interested in the output of a plugin, you can set an IO object that will receive all plugin output using this method.</p>

<h3>Requirements:</h3>

<blockquote><ul>
<li>curl/wget/aria2c or the progress bar gem</li>
<li>Nokogiri</li>
<li>ffmpeg if you want to extract audio tracks from the videos</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
</feed>
