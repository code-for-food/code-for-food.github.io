<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Chicken's Blog ^_^]]></title>
  <link href="http://codeforfoods.net/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://codeforfoods.net/"/>
  <updated>2014-12-09T17:31:08+07:00</updated>
  <id>http://codeforfoods.net/</id>
  <author>
    <name><![CDATA[codeforfoods]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Rails] How to Create a Rails App]]></title>
    <link href="http://codeforfoods.net/blog/2014/12/09/how-to-create-a-rails-app/"/>
    <updated>2014-12-09T17:14:37+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/12/09/how-to-create-a-rails-app</id>
    <content type="html"><![CDATA[<h4>How To Create a Rails App</h4>

<h5>A step by step guide to prepare your app.</h5>

<p>First there was “rails new Foo” &ndash; the next thing you know you’re adding “group :test, :development do gem ‘rspec-rails’ end” to your Gemfile and editing your database.yml file to reflect the correct localhost IP. While learning Rails for the first time, it’s difficult to remember these various minutiae of setting up your app; moreover, it’s even more difficult to remember which order they should be performed in. This can often mean running into some time consuming errors along the way. Here is a step by step guide I created, and very often use, to make sure I’m not missing any steps in setting up a working Rails app.</p>

<h4>The 17.5 Steps</h4>

<h5>Step 1</h5>

<pre><code>    rails new --database=postgresql OR rails new -T --database=postgresql
</code></pre>

<p>At Launch Academy we tend to use postgresql. So to save yourself a little extra work, make sure you include the &ndash;database flag when executing rails new.</p>

<p>The -T flag is short for &ndash;skip-test-unit (which is helpful since we usually delete the test directory anyway).</p>

<h5>Step 2</h5>

<pre><code>    remove turbolinks in Rails 4.x -- for Rails 3.x, make sure you remove the public/index.html
</code></pre>

<p>How to remove Turbolinks:</p>

<pre><code>⋅⋅* Remove the gem 'turbolinks' line from your Gemfile

⋅⋅* Remove the //= require turbolinks from your app/assets/javascripts/application.js.

⋅⋅* Remove the two "data-turbolinks-track" =&gt; true hash key/value pairs from your app/views/layouts/application.html.erb.
</code></pre>

<h5>Step 3</h5>

<pre><code>    git init
</code></pre>

<p>This command sets up your local git repository. You’ll need to do this command first in order to commit your changes later.</p>

<h5>Step 4</h5>

<p>edit config/database.yml</p>

<pre><code class="">    host: 127.0.0.1
</code></pre>

<p>This file holds some settings for your postgresql database. You will probably want to remove the username on your databases. For my system I also needed to add the line host: 127.0.0.1 to make postgresql work.</p>

<h5>Step 5</h5>

<p>Gemfile updates
These are some common gems I’ve used:</p>

<pre><code>    gem ‘twitter-bootstrap-rails’
    gem ‘simple-form’

   group :test, :development do
       gem 'rspec-rails'
       gem 'capybara'
       gem 'launchy'
   end

   group :test do
       gem 'factory_girl_rails'
     gem ‘shoulda-matchers’
   end

   group :development do    #access at rails/routes
       gem 'sextant'
   end
</code></pre>

<h5>Step 6</h5>

<pre><code>    rake db:create
</code></pre>

<p>I usually do this before bundle, as I’ve run into some errors otherwise. This command creates a local instance of the postgresql database.</p>

<h5>Step 7</h5>

<pre><code>    bundle install
</code></pre>

<h5>Step 8</h5>

<pre><code>    git add * ; git commit -m ‘message’
</code></pre>

<p>A good chance to commit those changes! git add * will add all changed files to your commit. When you do git commit -m ‘message’, those changes are then saved to your local git repository. This is useful if you ever need to go back to a stable version of your app. This command will also be very important to Git collaboration.</p>

<h5>Step 9</h5>

<pre><code>    rails g rspec:install (rails g bootstrap:install static)
</code></pre>

<p>Install any gem generated scaffolds you may be using. Rspec is a must! Other examples could include bootstrap, or devise.</p>

<h5>Step 10</h5>

<pre><code>    remove ~/test
</code></pre>

<p>Remove that ~/test dir once you have Rspec setup. A clean app is a happy app. If you used the -T flag while creating the rails app, you can skip this step.</p>

<h5>Step 11</h5>

<p>add to spec_helper.rb</p>

<pre><code>    #spec_helper.rb
  require 'capybara/rails'
  require 'capybara/rspec'

  config.include FactoryGirl::Syntax::Methods
</code></pre>

<p>Add this helpful lines to make sure everything works! I like to include the FactoryGirl line as well. That way I don’t have to type FactoryGirl.build, but rather just: build.</p>

<h5>Step 12</h5>

<pre><code>    create factories.rb file in spec/support
</code></pre>

<p>You’ll need to create the spec/support directory, where you’ll place a new file that will create your factories.</p>

<h5>Step 13</h5>

<pre><code>    git add * ; git commit -m ‘message’
</code></pre>

<p>Commit</p>

<h5>Step 14</h5>

<pre><code>    create models / scaffold / migrations
</code></pre>

<p>Time to create any generated code. If you’re not using generated code, you can mostly skip to step 16</p>

<h5>Step 15</h5>

<pre><code>    git add * ; git commit -m ‘message’
</code></pre>

<p>Commit before migrating: JUST IN CASE!</p>

<h5>Step 16</h5>

<pre><code>    rake db:migrate ; rake db:rollback ; rake db:migrate
</code></pre>

<p>Use this command to double check that your tables / migrations are correctly configured. This is a best practices sort of deal. If you&rsquo;re using zsh, I&rsquo;d highly recommend making an alias for this command!</p>

<h5>Step 16.5</h5>

<pre><code>    rake db:test:prepare
</code></pre>

<p>This command generates the test environment that Rspec uses. You’ll need to redo this command if you make any new migrations.</p>

<h5>Step 17</h5>

<pre><code>    git add * ; git commit -m ‘message’
</code></pre>

<p>Don’t forget to commit after you Migrate!</p>

<h5>Extras: add database.yml and secret_token.rb to your .gitginore</h5>

<p>This is just a good habit to get into. When others fork your repos, having special database settings can give them a headache when trying to check out your code. Do them a favor and tell git to ignore that file. Another file to add is the secret_token.rb &ndash; it&rsquo;s called that for a reason! It&rsquo;s supposed to be secret! Protect your users by hiding this file.</p>

<p>In your .gitignore file add the lines:</p>

<pre><code>    /config/database.yml
    /config/secret_token.rb
</code></pre>

<h6>From here you can do whatever you’d like, and you shouldn’t break your app too much. Have fun!</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing: PG::UniqueViolation: ERROR: Duplicate Key Value Violates Unique Constraint 'Your_table_name_pkey']]></title>
    <link href="http://codeforfoods.net/blog/2014/12/05/fixing-pg-uniqueviolation-error-duplicate-key-value-violates-unique-constraint-your-table-name-pkey/"/>
    <updated>2014-12-05T10:04:09+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/12/05/fixing-pg-uniqueviolation-error-duplicate-key-value-violates-unique-constraint-your-table-name-pkey</id>
    <content type="html"><![CDATA[<h5>Issue</h5>

<p>Postgresql maintain a internal value which is the max value of the id column of a given table. And uses this to generate values for primary keys when you insert new records. Sometimes this internally stored value can get messed up. And that can cause the error above when you are trying to insert a new record to the table.</p>

<h5>How to fix ????</h5>

<p>You need to basically correct the above said value.</p>

<p>Access to your database and run :</p>

<pre><code>    pg_dump -U user_name database_name -f database_backup_name.sql
</code></pre>

<p>Change your rails app and run :</p>

<pre><code>    cd /your/rails/app/root/
    rails db production
</code></pre>

<p>Update your_table_id_sql</p>

<pre><code>    SELECT setval('your_table_id_seq', (SELECT MAX(id) FROM your_table));
</code></pre>

<p>replace your_table with whatever the table name you are using. And the code above assumes your primary key column name is id.</p>

<p>Good lucks to you :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Protocol]]></title>
    <link href="http://codeforfoods.net/blog/2014/11/28/rails-protocol/"/>
    <updated>2014-11-28T10:05:34+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/11/28/rails-protocol</id>
    <content type="html"><![CDATA[<p>A guide for writing great web apps.</p>

<h4>Set Up Laptop</h4>

<p>Set up your laptop with :</p>

<ul>
<li><p><a href="https://github.com/thoughtbot/laptop">https://github.com/thoughtbot/laptop</a></p></li>
<li><p><a href="https://github.com/thoughtbot/dotfiles">https://github.com/thoughtbot/dotfiles</a></p></li>
</ul>


<h4>Create App</h4>

<p>Get Suspenders.</p>

<pre><code>    gem install suspenders
</code></pre>

<p>Create the app.</p>

<pre><code>    suspenders app --heroku true --github organization/app
</code></pre>

<h4>Set Up App</h4>

<p>Get the code</p>

<pre><code>    git clone git@github.com:organization/app.git
</code></pre>

<p>Set up the app&rsquo;s dependencies</p>

<pre><code>    cd project
    ./bin/setup
</code></pre>

<p>Use Heroku config to get ENV variables. (<a href="https://github.com/ddollar/heroku-config">https://github.com/ddollar/heroku-config</a>)</p>

<pre><code>    heroku config:pull --remote staging
</code></pre>

<p>Delete extra lines in .env, leaving only those needed for app to function properly. For example: BRAINTREE_MERCHANT_ID and S3_SECRET.</p>

<p>Use Foreman to run the app locally (<a href="https://github.com/ddollar/foreman">https://github.com/ddollar/foreman</a>)</p>

<pre><code>    foreman start
</code></pre>

<p>It uses your .env file and Procfile to run processes like Heroku&rsquo;s Cedar stack. (<a href="https://devcenter.heroku.com/articles/cedar">https://devcenter.heroku.com/articles/cedar</a>)</p>

<h4>Git protocol</h4>

<p><a href="https://github.com/thoughtbot/guides/tree/master/protocol/git">https://github.com/thoughtbot/guides/tree/master/protocol/git</a></p>

<h4>Product Review</h4>

<p><a href="https://github.com/thoughtbot/guides/tree/master/protocol/product-review">https://github.com/thoughtbot/guides/tree/master/protocol/product-review</a></p>

<h4>Code Review</h4>

<p><a href="https://github.com/thoughtbot/guides/tree/master/code-review">https://github.com/thoughtbot/guides/tree/master/code-review</a></p>

<ul>
<li><p>Review data integrity closely, such as migrations that make irreversible changes to the data, and whether there is a related todo to make a database backup during the staging and production deploys.</p></li>
<li><p>Review SQL queries for potential SQL injection.</p></li>
<li><p>Review whether dependency upgrades include a reason in the commit message, such as a link to the dependency&rsquo;s
ChangeLog or NEWS file.</p></li>
<li><p>Review whether new database indexes are necessary if new columns or SQL queries were added.</p></li>
<li><p>Review whether new scheduler (cron) tasks have been added and whether there is a related todo in the project management system to add it during the staging and production deploys.</p></li>
</ul>


<h4>Deploy</h4>

<p>View a list of new commits. View changed files.</p>

<pre><code>    git fetch staging
    git log staging/master..master
    git diff --stat staging/master
</code></pre>

<p>If necessary, add new environment variables.</p>

<pre><code>    heroku config:add NEW_VARIABLE=value --remote staging
</code></pre>

<p>Deploy to Heroku</p>

<pre><code>    git push staging
</code></pre>

<p>If necessary, run migrations and restart the dynos.</p>

<pre><code>    heroku run rake db:migrate --remote staging
    heroku restart --remote staging
</code></pre>

<p>Introspect to make sure everything&rsquo;s ok.</p>

<pre><code>    watch heroku ps --remote staging
</code></pre>

<p>Test the feature in browser.</p>

<p>Deploy to production.</p>

<pre><code>    git fetch production
    git log production/master..master
    git diff --stat production/master
    heroku config:add NEW_VARIABLE=value --remote production
    git push production
    heroku run rake db:migrate --remote production
    heroku restart --remote production
    watch heroku ps --remote production
</code></pre>

<p>Watch logs and metrics dashboards.</p>

<p>Close pull request and comment Merged.</p>

<h4>Set Up Production Environment</h4>

<ul>
<li><p>Make sure that your Procfile is set up to run Unicorn. (<a href="https://devcenter.heroku.com/articles/procfile">https://devcenter.heroku.com/articles/procfile</a>)</p></li>
<li><p>Make sure the PG Backups add-on is enabled.</p></li>
<li><p>Create a read-only Heroku Follower for your production database. If a Heroku database outage occurs, Heroku can use the follower to get your app back up and running faster. (<a href="https://devcenter.heroku.com/articles/heroku-postgres-follower-databases#high-availability-with-followers">https://devcenter.heroku.com/articles/heroku-postgres-follower-databases#high-availability-with-followers</a>)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Ruby on Rails by Caching Your Database Queries]]></title>
    <link href="http://codeforfoods.net/blog/2014/11/28/scaling-ruby-on-rails-by-caching-your-database-queries/"/>
    <updated>2014-11-28T08:34:54+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/11/28/scaling-ruby-on-rails-by-caching-your-database-queries</id>
    <content type="html"><![CDATA[<p>This article would help you to scaling your app with caching your database queries.</p>

<p>Its pretty good to use active-record in ruby on rails, relationships, find_by methods, where queries everything makes your life much more simpler as a developer but sooner or later your application becomes slow. At that time you need to work on optimizations. There are lot of work around for optimizations and one of them in caching the queries. The company I work for is StudyPad and we have a product ie splashmath and that has over 9 millions users using it across multiple platforms. The amount of traffic that we get is pretty huge and caching one of the thing that helped us to solve out scaling problems. Here is quick idea to cache your queries in memcache.</p>

<h4>Basic requirements</h4>

<p>There are few requirements for this. First is the dalli gem and memcache installed on your machine.</p>

<h4>Basic structure of the application.</h4>

<p>We have lot of static/seed data which change very less and the queries on those things are pretty high. So first thing to handle that static data.</p>

<pre><code>    class Grade &lt; ActiveRecord::Base
      has_many :skills
    end

    class Skills &lt; ActiveRecord::Base
      belongs_to :grade
    end
</code></pre>

<p>So in order to get skills for a grade, its pretty simple</p>

<pre><code>    grade = Grade.first
    skills = grade.skills
</code></pre>

<p>Now for that matter every time we are fetching skills for a grade its gonna hit the database and get the results. So its time to get this query and its results cached.</p>

<p>Assuming you have configured dalli gem easily and you have memcached up and running. Here is a simple method to cache the results</p>

<pre><code>    def cached_skills
      Rails.cache.fetch([self.class.name, id, :skills], expires_in: 240.hours) {
        skills.to_a
      }
end
</code></pre>

<p>So instead of fetching skills like</p>

<pre><code>    grade.skills
</code></pre>

<p>we are gonna get it like</p>

<pre><code>    grade.cached_skills
</code></pre>

<p>So whats its gonna do. Its gonna fetch the results first time from the database and store it in cache. Next time its gonna return the results from the cache. Note few things here</p>

<ul>
<li><p>Understand the pattern of the key. [self.class.name, id, :skills] is your key here.</p></li>
<li><p>Cache will expire in 240.hours. You can customize it as per your needs. Better keep a constant for this somewhere in your application.</p></li>
<li><p>In cached_skills methods we are keep records not the active-record relations that why we have to convert into array by using to_a else active-record-relation will be cached and database query will be executed.</p></li>
</ul>


<pre><code>    skills.to_a
</code></pre>

<h4>Expiring the cache.</h4>

<p>We are caching the query results but we are not expiring the results. What if some skill has changed. Grade object is not getting any notification for that, so cache is stale, we need to expire it. So we can write a after_commit hook for skill to expire its grade object’s cache</p>

<pre><code>    # in skill model
    after_commit :flush_cache

    def flush_cache
      Rails.cache.delete([self.grade.class.name, self.grade_id, :skills])
    end
</code></pre>

<p>This is enough to make sure you cache is never stale. There is another way to handle the expiring cache. Lets see that.</p>

<h4>Another way</h4>

<p>We redefine the models like this</p>

<pre><code>    class Grade &lt; ActiveRecord::Base
      has_many :skills
    end

    class Skills &lt; ActiveRecord::Base
      belongs_to :grade, touch: true
    end
</code></pre>

<p>Note we have added touch: true in skills, and now we redefine our cached_skills method again:</p>

<pre><code>    def cached_skills
      Rails.cache.fetch([self.class.name, updated_at.to_i, :skills], expires_in: 240.hours) {
        skills.to_a
      }
    end
</code></pre>

<p>Now just caching this we don’t need to expire the cache manually, when ever skills get updated it will touch its parent object object grade, that will update its updated_at value and that specific cache will be never used, as key attribute updated_at has been changed.</p>

<h4>The problem with second approach</h4>

<p>But there is a problem. Assume you have 10 different has_many relationships for grade and you are caching it all, now everytime a skill has be changed all the other cache keys for grade relationships will be useless too. For example: Grade has_many topics</p>

<pre><code>    class Grade &lt; ActiveRecord::Base
      has_many :skills
    end

    class Skill &lt; ActiveRecord::Base
      belongs_to :grade, touch: true
    end

    class Topic &lt; ActiveRecord::Base
      belongs_to :grade, touch: true
    end
</code></pre>

<pre><code>    # In Grade model
    def cached_skills
      Rails.cache.fetch([self.class.name, updated_at.to_i, :skills], expires_in: 240.hours) {
        skills.to_a
      }
    end

    def cached_topics
      Rails.cache.fetch([self.class.name, updated_at.to_i, :topics], expires_in: 240.hours) {
        topics.to_a
      }
    end
</code></pre>

<p>Now in this case changing any skill will make topics cache useless, but that’s not the case when you are trying to expire it manually. So both approach has pros and cons, first will ask you write more code and second expire cache more frequently. You have to make that choice as per your needs.</p>

<h4>What else?</h4>

<p>Using the same base principle you can cache lot of queries like</p>

<pre><code>Grade.cached_find_by_id(1)
Skill.first.cached_grade
</code></pre>

<p>This approach helped us to reduce the load on RDS and make things pretty fast. I hope this will help you too. Let me know you feedback or some tips that made you system more faster</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] Get Youtube Download Link]]></title>
    <link href="http://codeforfoods.net/blog/2014/11/19/rails-get-youtube-download-link/"/>
    <updated>2014-11-19T08:39:56+07:00</updated>
    <id>http://codeforfoods.net/blog/2014/11/19/rails-get-youtube-download-link</id>
    <content type="html"><![CDATA[<h3>Installation:</h3>

<pre><code>    gem install viddl-rb
</code></pre>

<h3>Usage:</h3>

<p>Download a video: viddl-rb <a href="http://www.youtube.com/watch?v=QH2-TGUlwu4">http://www.youtube.com/watch?v=QH2-TGUlwu4</a>
<br>
Viddl-rb supports the following command line options:
<code>
-e, --extract-audio              Extract the audio track of the download to a separate file
-a, --abort-on-failure           Abort if one of the videos in a list fails to download
-u, --url-only                   Just display the download url without downloading the file.
-t, --title-only                 Just display the title without downloading the file.
-f, --filter REGEX               Filters a video playlist according to the regex (Youtube only right now)
-s, --save-dir DIRECTORY         Specifies the directory where videos should be saved
-d, --downloader TOOL            Specifies the tool to download with. Supports 'wget', 'curl', 'aria2c' and 'net-http'
-q, --quality QUALITY            Specifies the video format and resolution in the following way: width:height:format (e.g. 1280:720:mp4)
                                 The width, height and format may be omitted with a *.
                                 For example, to match any quality with a height of 720 pixels in any format specify --quality *:720:*
-h, --help                       Displays the help screen
</code></p>

<h3>Library Usage:</h3>

<pre><code>require 'viddl-rb'

download_urls = ViddlRb.get_urls("http://www.youtube.com/watch?v=QH2-TGUlwu4")
download_urls.first     # =&gt; "http://o-o.preferred.arn06s04.v3.lscac ..."
</code></pre>

<p>The ViddlRb module has the following module public methods:</p>

<h4>get_urls_names(url)</h4>

<p> &ndash; Returns an array of one or more hashes that has the keys :url which points to the download url and :name which points to the name (which is a filename safe version of the video title with a file extension). Returns nil if the url is not recognized by any plugins.</p>

<h4>get_urls_exts(url)</h4>

<p>&ndash; Same as get_urls_names but with just the file extension (for example &ldquo;.mp4&rdquo;) instead of the full filename, and the :name key is replaced with :ext. Returns nil if the url is not recognized by any plugins.</p>

<h4>get_urls(url)</h4>

<p>&ndash; Returns an array of download urls for the specified video url. Returns nil if the url is not recognized by any plugins.</p>

<h4>get_names(url)</h4>

<p>&ndash; Returns an array of filenames for the specified video url. Returns nil if the url is not recognized by any plugins.</p>

<h4>io=(io_object)</h4>

<p>&ndash; By default all plugin output to stdout will be suppressed when the library is used. If you are interested in the output of a plugin, you can set an IO object that will receive all plugin output using this method.</p>

<h3>Requirements:</h3>

<blockquote><ul>
<li>curl/wget/aria2c or the progress bar gem</li>
<li>Nokogiri</li>
<li>ffmpeg if you want to extract audio tracks from the videos</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
</feed>
